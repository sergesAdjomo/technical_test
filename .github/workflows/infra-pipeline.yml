name: Infrastructure Pipeline

on:
  push:
    paths:
      - 'infra/**'
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PROJECT_ID: e-datacap
  REGION: us-central1
  SERVICE_ACCOUNT: terraform-sa@e-datacap.iam.gserviceaccount.com
  TF_STATE_BUCKET: edata-terraform-tfstate-files
  TF_LOG: INFO
  TF_IN_AUTOMATION: true

permissions:
  contents: write
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        working-directory: ./infra
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check Terraform Files
        run: |
          if ! find . -name "*.tf" -o -name "*.tfvars" | grep -q .; then
            echo "No Terraform files found in the repository"
            exit 1
          fi
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Verify GCP Resources
        run: |
          echo "Verifying GCP Project and Permissions..."
          gcloud projects describe ${{ env.PROJECT_ID }}
          
          echo "Verifying State Bucket..."
          if ! gsutil ls -b gs://${{ env.TF_STATE_BUCKET }} > /dev/null 2>&1; then
            echo "Creating Terraform state bucket..."
            gsutil mb -p ${{ env.PROJECT_ID }} -l ${{ env.REGION }} gs://${{ env.TF_STATE_BUCKET }}
            gsutil versioning set on gs://${{ env.TF_STATE_BUCKET }}
          fi

      - name: Clean Terraform Lock
        run: gsutil rm -f gs://${{ env.TF_STATE_BUCKET }}/terraform/tfstate/default.tflock || true
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"
      
      - name: Terraform Init
        id: init
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/tfstate"

      - name: Terraform Format and Validate
        id: fmt
        run: |
          echo "Formatting Terraform files..."
          terraform fmt -recursive -check || (terraform fmt -recursive && \
          git config --global user.name "github-actions[bot]" && \
          git config --global user.email "github-actions[bot]@users.noreply.github.com" && \
          git add . && \
          git commit -m "style: auto-format terraform files" && \
          git push)
          
          echo "Validating Terraform configuration..."
          terraform validate
      
      - id: plan
        name: Terraform Plan
        run: |
          echo "Planning Terraform changes..."
          terraform plan \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var-file="env/dev.tfvars" \
            -detailed-exitcode -out=tfplan || exit_code=$?
          
          if [ $exit_code -eq 2 ]; then
            echo "Changes detected in plan"
          elif [ $exit_code -eq 0 ]; then
            echo "No changes detected in plan"
          else
            echo "Error during plan"
            exit 1
          fi
        
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: |
          echo "Applying Terraform changes..."
          terraform apply \
            -var="project_id=${{ env.PROJECT_ID }}" \
            -var="region=${{ env.REGION }}" \
            -var-file="env/dev.tfvars" \
            -auto-approve tfplan
          
      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::Pipeline failed! Check the logs for more details."
          echo "Failed Step: ${{ github.workflow }} - ${{ github.job }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"

      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up..."
          rm -f tfplan || true
          rm -rf .terraform || true
          gsutil rm -f gs://${{ env.TF_STATE_BUCKET }}/terraform/tfstate/default.tflock || true